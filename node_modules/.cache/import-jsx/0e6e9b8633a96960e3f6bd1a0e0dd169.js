#!/usr/bin/env NODE_NO_WARNINGS=1 node --loader=import-jsx
import React, { useState } from 'react';
import { render, Text } from 'ink';
import SelectInput from 'ink-select-input';
import TextInput from 'ink-text-input';
import Spinner from 'ink-spinner';
import { chatbots } from './utils';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
const Demo = () => {
  const [chatbot, setChatbot] = useState('');
  const [question, setQuestion] = useState('');
  const [loading, setLoading] = useState(false);
  const setSelectedChatbot = option => {
    setChatbot(option.value);
  };
  const askQuestion = input => {
    setLoading(true);
  };
  const onQuestionChange = question => {
    setQuestion(question);
  };
  return _jsxs(_Fragment, {
    children: [!chatbot && _jsx(Text, {
      color: "green",
      children: "What type of chatbot would you like to create?"
    }), !chatbot && _jsx(SelectInput, {
      items: chatbots,
      onSelect: setSelectedChatbot
    }), chatbot && _jsx(Text, {
      color: "green",
      children: "Perfect!, now tell me your question"
    }), chatbot && _jsx(TextInput, {
      value: question,
      onChange: onQuestionChange,
      onSubmit: askQuestion
    }), loading && _jsxs(Text, {
      color: "blue",
      children: [_jsx(Spinner, {
        type: "flip"
      }), "\xA0Wait a moment, asking to ChatGPT"]
    })]
  });
};
render(_jsx(Demo, {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInVzZVN0YXRlIiwicmVuZGVyIiwiVGV4dCIsIlNlbGVjdElucHV0IiwiVGV4dElucHV0IiwiU3Bpbm5lciIsImNoYXRib3RzIiwianN4IiwiX2pzeCIsImpzeHMiLCJfanN4cyIsIkZyYWdtZW50IiwiX0ZyYWdtZW50IiwiRGVtbyIsImNoYXRib3QiLCJzZXRDaGF0Ym90IiwicXVlc3Rpb24iLCJzZXRRdWVzdGlvbiIsImxvYWRpbmciLCJzZXRMb2FkaW5nIiwic2V0U2VsZWN0ZWRDaGF0Ym90Iiwib3B0aW9uIiwidmFsdWUiLCJhc2tRdWVzdGlvbiIsImlucHV0Iiwib25RdWVzdGlvbkNoYW5nZSIsImNoaWxkcmVuIiwiY29sb3IiLCJpdGVtcyIsIm9uU2VsZWN0Iiwib25DaGFuZ2UiLCJvblN1Ym1pdCIsInR5cGUiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBOT0RFX05PX1dBUk5JTkdTPTEgbm9kZSAtLWxvYWRlcj1pbXBvcnQtanN4XG5cbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgVGV4dCB9IGZyb20gJ2luayc7XG5pbXBvcnQgU2VsZWN0SW5wdXQgZnJvbSAnaW5rLXNlbGVjdC1pbnB1dCc7XG5pbXBvcnQgVGV4dElucHV0IGZyb20gJ2luay10ZXh0LWlucHV0JztcbmltcG9ydCBTcGlubmVyIGZyb20gJ2luay1zcGlubmVyJztcblxuaW1wb3J0IHsgY2hhdGJvdHMgfSBmcm9tICcuL3V0aWxzJ1xuXG5cbmNvbnN0IERlbW8gPSAoKSA9PiB7XG5cdGNvbnN0IFtjaGF0Ym90LCBzZXRDaGF0Ym90XSA9IHVzZVN0YXRlKCcnKVxuXHRjb25zdCBbcXVlc3Rpb24sIHNldFF1ZXN0aW9uXSA9IHVzZVN0YXRlKCcnKVxuXHRjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZShmYWxzZSlcblxuXHRjb25zdCBzZXRTZWxlY3RlZENoYXRib3QgPSAob3B0aW9uKSA9PiB7XG5cdFx0c2V0Q2hhdGJvdChvcHRpb24udmFsdWUpXG5cdH1cblxuXHRjb25zdCBhc2tRdWVzdGlvbiA9IChpbnB1dCkgPT4ge1xuXHRcdHNldExvYWRpbmcodHJ1ZSlcblx0fVxuXG5cdGNvbnN0IG9uUXVlc3Rpb25DaGFuZ2UgPSAocXVlc3Rpb24pID0+IHtcblx0XHRzZXRRdWVzdGlvbihxdWVzdGlvbilcblx0fVxuXG5cdHJldHVybiA8PlxuXHRcdHshY2hhdGJvdCAmJiA8VGV4dCBjb2xvcj1cImdyZWVuXCI+V2hhdCB0eXBlIG9mIGNoYXRib3Qgd291bGQgeW91IGxpa2UgdG8gY3JlYXRlPzwvVGV4dD4gfVxuXHRcdHshY2hhdGJvdCAmJiA8U2VsZWN0SW5wdXQgaXRlbXM9e2NoYXRib3RzfSBvblNlbGVjdD17c2V0U2VsZWN0ZWRDaGF0Ym90fSAvPiB9XG5cdFx0e2NoYXRib3QgJiYgPFRleHQgY29sb3I9XCJncmVlblwiPlBlcmZlY3QhLCBub3cgdGVsbCBtZSB5b3VyIHF1ZXN0aW9uPC9UZXh0PiB9XG5cdFx0e2NoYXRib3QgJiYgPFRleHRJbnB1dCB2YWx1ZT17cXVlc3Rpb259IG9uQ2hhbmdlPXtvblF1ZXN0aW9uQ2hhbmdlfSBvblN1Ym1pdD17YXNrUXVlc3Rpb259IC8+fVxuXHRcdHsgbG9hZGluZyAmJiA8VGV4dCBjb2xvcj1cImJsdWVcIj48U3Bpbm5lciB0eXBlPSdmbGlwJyAvPiZuYnNwO1dhaXQgYSBtb21lbnQsIGFza2luZyB0byBDaGF0R1BUPC9UZXh0Pn1cblx0PC8+XG5cbn07XG5yZW5kZXIoPERlbW8gLz4pOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxPQUFPQSxLQUFLLElBQUlDLFFBQVEsUUFBUSxPQUFPO0FBQ3ZDLFNBQVNDLE1BQU0sRUFBRUMsSUFBSSxRQUFRLEtBQUs7QUFDbEMsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQUMxQyxPQUFPQyxTQUFTLE1BQU0sZ0JBQWdCO0FBQ3RDLE9BQU9DLE9BQU8sTUFBTSxhQUFhO0FBRWpDLFNBQVNDLFFBQVEsUUFBUSxTQUFTO0FBQUEsU0FBQUMsR0FBQSxJQUFBQyxJQUFBO0FBQUEsU0FBQUMsSUFBQSxJQUFBQyxLQUFBO0FBQUEsU0FBQUMsUUFBQSxJQUFBQyxTQUFBO0FBR2xDLE1BQU1DLElBQUksR0FBR0EsQ0FBQSxLQUFNO0VBQ2xCLE1BQU0sQ0FBQ0MsT0FBTyxFQUFFQyxVQUFVLENBQUMsR0FBR2YsUUFBUSxDQUFDLEVBQUUsQ0FBQztFQUMxQyxNQUFNLENBQUNnQixRQUFRLEVBQUVDLFdBQVcsQ0FBQyxHQUFHakIsUUFBUSxDQUFDLEVBQUUsQ0FBQztFQUM1QyxNQUFNLENBQUNrQixPQUFPLEVBQUVDLFVBQVUsQ0FBQyxHQUFHbkIsUUFBUSxDQUFDLEtBQUssQ0FBQztFQUU3QyxNQUFNb0Isa0JBQWtCLEdBQUlDLE1BQU0sSUFBSztJQUN0Q04sVUFBVSxDQUFDTSxNQUFNLENBQUNDLEtBQUssQ0FBQztFQUN6QixDQUFDO0VBRUQsTUFBTUMsV0FBVyxHQUFJQyxLQUFLLElBQUs7SUFDOUJMLFVBQVUsQ0FBQyxJQUFJLENBQUM7RUFDakIsQ0FBQztFQUVELE1BQU1NLGdCQUFnQixHQUFJVCxRQUFRLElBQUs7SUFDdENDLFdBQVcsQ0FBQ0QsUUFBUSxDQUFDO0VBQ3RCLENBQUM7RUFFRCxPQUFPTixLQUFBLENBQUFFLFNBQUE7SUFBQWMsUUFBQSxHQUNMLENBQUNaLE9BQU8sSUFBSU4sSUFBQSxDQUFDTixJQUFJO01BQUN5QixLQUFLLEVBQUMsT0FBTztNQUFBRCxRQUFBLEVBQUM7SUFBOEMsRUFBTyxFQUNyRixDQUFDWixPQUFPLElBQUlOLElBQUEsQ0FBQ0wsV0FBVztNQUFDeUIsS0FBSyxFQUFFdEIsUUFBUztNQUFDdUIsUUFBUSxFQUFFVDtJQUFtQixFQUFHLEVBQzFFTixPQUFPLElBQUlOLElBQUEsQ0FBQ04sSUFBSTtNQUFDeUIsS0FBSyxFQUFDLE9BQU87TUFBQUQsUUFBQSxFQUFDO0lBQW1DLEVBQU8sRUFDekVaLE9BQU8sSUFBSU4sSUFBQSxDQUFDSixTQUFTO01BQUNrQixLQUFLLEVBQUVOLFFBQVM7TUFBQ2MsUUFBUSxFQUFFTCxnQkFBaUI7TUFBQ00sUUFBUSxFQUFFUjtJQUFZLEVBQUcsRUFDM0ZMLE9BQU8sSUFBSVIsS0FBQSxDQUFDUixJQUFJO01BQUN5QixLQUFLLEVBQUMsTUFBTTtNQUFBRCxRQUFBLEdBQUNsQixJQUFBLENBQUNILE9BQU87UUFBQzJCLElBQUksRUFBQztNQUFNLEVBQUcsd0NBQXNDO0lBQUEsRUFBTztFQUFBLEVBQ2xHO0FBRUosQ0FBQztBQUNEL0IsTUFBTSxDQUFDTyxJQUFBLENBQUNLLElBQUksS0FBRyxDQUFDIn0=