#!/usr/bin/env NODE_NO_WARNINGS=1 node --loader=import-jsx
import React, { useState, useEffect } from 'react';
import { render, Text } from 'ink';
import SelectInput from 'ink-select-input';
import TextInput from 'ink-text-input';
import Spinner from 'ink-spinner';
import chatbots from './chatbots';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
const Demo = () => {
  const [chatbot, setChatbot] = useState('');
  const [question, setQuestion] = useState('');
  const [loading, setLoading] = useState(false);
  const setSelectedChatbot = option => {
    setChatbot(option.value);
  };
  const askQuestion = input => {
    setLoading(true);
  };
  const onQuestionChange = question => {
    setQuestion(question);
  };
  return _jsxs(_Fragment, {
    children: [!chatbot && _jsx(Text, {
      color: "green",
      children: "What type of chatbot would you like to create?"
    }), !chatbot && _jsx(SelectInput, {
      items: chatbots,
      onSelect: setSelectedChatbot
    }), chatbot && _jsx(Text, {
      color: "green",
      children: "Perfect!, now tell me your question"
    }), chatbot && _jsx(TextInput, {
      value: question,
      onChange: onQuestionChange,
      onSubmit: askQuestion
    }), loading && _jsxs(Text, {
      color: "blue",
      children: [_jsx(Spinner, {
        type: "flip"
      }), "\xA0Wait a moment, asking to ChatGPT"]
    })]
  });
};
render(_jsx(Demo, {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwicmVuZGVyIiwiVGV4dCIsIlNlbGVjdElucHV0IiwiVGV4dElucHV0IiwiU3Bpbm5lciIsImNoYXRib3RzIiwianN4IiwiX2pzeCIsImpzeHMiLCJfanN4cyIsIkZyYWdtZW50IiwiX0ZyYWdtZW50IiwiRGVtbyIsImNoYXRib3QiLCJzZXRDaGF0Ym90IiwicXVlc3Rpb24iLCJzZXRRdWVzdGlvbiIsImxvYWRpbmciLCJzZXRMb2FkaW5nIiwic2V0U2VsZWN0ZWRDaGF0Ym90Iiwib3B0aW9uIiwidmFsdWUiLCJhc2tRdWVzdGlvbiIsImlucHV0Iiwib25RdWVzdGlvbkNoYW5nZSIsImNoaWxkcmVuIiwiY29sb3IiLCJpdGVtcyIsIm9uU2VsZWN0Iiwib25DaGFuZ2UiLCJvblN1Ym1pdCIsInR5cGUiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBOT0RFX05PX1dBUk5JTkdTPTEgbm9kZSAtLWxvYWRlcj1pbXBvcnQtanN4XG5cbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBUZXh0IH0gZnJvbSAnaW5rJztcbmltcG9ydCBTZWxlY3RJbnB1dCBmcm9tICdpbmstc2VsZWN0LWlucHV0JztcbmltcG9ydCBUZXh0SW5wdXQgZnJvbSAnaW5rLXRleHQtaW5wdXQnO1xuaW1wb3J0IFNwaW5uZXIgZnJvbSAnaW5rLXNwaW5uZXInO1xuXG5pbXBvcnQgY2hhdGJvdHMgZnJvbSAnLi9jaGF0Ym90cydcblxuXG5jb25zdCBEZW1vID0gKCkgPT4ge1xuXHRjb25zdCBbY2hhdGJvdCwgc2V0Q2hhdGJvdF0gPSB1c2VTdGF0ZSgnJylcblx0Y29uc3QgW3F1ZXN0aW9uLCBzZXRRdWVzdGlvbl0gPSB1c2VTdGF0ZSgnJylcblx0Y29uc3QgW2xvYWRpbmcsIHNldExvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpXG5cblx0Y29uc3Qgc2V0U2VsZWN0ZWRDaGF0Ym90ID0gKG9wdGlvbikgPT4ge1xuXHRcdHNldENoYXRib3Qob3B0aW9uLnZhbHVlKVxuXHR9XG5cblx0Y29uc3QgYXNrUXVlc3Rpb24gPSAoaW5wdXQpID0+IHtcblx0XHRzZXRMb2FkaW5nKHRydWUpXG5cdH1cblxuXHRjb25zdCBvblF1ZXN0aW9uQ2hhbmdlID0gKHF1ZXN0aW9uKSA9PiB7XG5cdFx0c2V0UXVlc3Rpb24ocXVlc3Rpb24pXG5cdH1cblxuXHRyZXR1cm4gPD5cblx0XHR7IWNoYXRib3QgJiYgPFRleHQgY29sb3I9XCJncmVlblwiPldoYXQgdHlwZSBvZiBjaGF0Ym90IHdvdWxkIHlvdSBsaWtlIHRvIGNyZWF0ZT88L1RleHQ+IH1cblx0XHR7IWNoYXRib3QgJiYgPFNlbGVjdElucHV0IGl0ZW1zPXtjaGF0Ym90c30gb25TZWxlY3Q9e3NldFNlbGVjdGVkQ2hhdGJvdH0gLz4gfVxuXHRcdHtjaGF0Ym90ICYmIDxUZXh0IGNvbG9yPVwiZ3JlZW5cIj5QZXJmZWN0ISwgbm93IHRlbGwgbWUgeW91ciBxdWVzdGlvbjwvVGV4dD4gfVxuXHRcdHtjaGF0Ym90ICYmIDxUZXh0SW5wdXQgdmFsdWU9e3F1ZXN0aW9ufSBvbkNoYW5nZT17b25RdWVzdGlvbkNoYW5nZX0gb25TdWJtaXQ9e2Fza1F1ZXN0aW9ufSAvPn1cblx0XHR7IGxvYWRpbmcgJiYgPFRleHQgY29sb3I9XCJibHVlXCI+PFNwaW5uZXIgdHlwZT0nZmxpcCcgLz4mbmJzcDtXYWl0IGEgbW9tZW50LCBhc2tpbmcgdG8gQ2hhdEdQVDwvVGV4dD59XG5cdDwvPlxuXG59O1xucmVuZGVyKDxEZW1vIC8+KTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBRUEsT0FBT0EsS0FBSyxJQUFJQyxRQUFRLEVBQUVDLFNBQVMsUUFBUSxPQUFPO0FBQ2xELFNBQVNDLE1BQU0sRUFBRUMsSUFBSSxRQUFRLEtBQUs7QUFDbEMsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQUMxQyxPQUFPQyxTQUFTLE1BQU0sZ0JBQWdCO0FBQ3RDLE9BQU9DLE9BQU8sTUFBTSxhQUFhO0FBRWpDLE9BQU9DLFFBQVEsTUFBTSxZQUFZO0FBQUEsU0FBQUMsR0FBQSxJQUFBQyxJQUFBO0FBQUEsU0FBQUMsSUFBQSxJQUFBQyxLQUFBO0FBQUEsU0FBQUMsUUFBQSxJQUFBQyxTQUFBO0FBR2pDLE1BQU1DLElBQUksR0FBR0EsQ0FBQSxLQUFNO0VBQ2xCLE1BQU0sQ0FBQ0MsT0FBTyxFQUFFQyxVQUFVLENBQUMsR0FBR2hCLFFBQVEsQ0FBQyxFQUFFLENBQUM7RUFDMUMsTUFBTSxDQUFDaUIsUUFBUSxFQUFFQyxXQUFXLENBQUMsR0FBR2xCLFFBQVEsQ0FBQyxFQUFFLENBQUM7RUFDNUMsTUFBTSxDQUFDbUIsT0FBTyxFQUFFQyxVQUFVLENBQUMsR0FBR3BCLFFBQVEsQ0FBQyxLQUFLLENBQUM7RUFFN0MsTUFBTXFCLGtCQUFrQixHQUFJQyxNQUFNLElBQUs7SUFDdENOLFVBQVUsQ0FBQ00sTUFBTSxDQUFDQyxLQUFLLENBQUM7RUFDekIsQ0FBQztFQUVELE1BQU1DLFdBQVcsR0FBSUMsS0FBSyxJQUFLO0lBQzlCTCxVQUFVLENBQUMsSUFBSSxDQUFDO0VBQ2pCLENBQUM7RUFFRCxNQUFNTSxnQkFBZ0IsR0FBSVQsUUFBUSxJQUFLO0lBQ3RDQyxXQUFXLENBQUNELFFBQVEsQ0FBQztFQUN0QixDQUFDO0VBRUQsT0FBT04sS0FBQSxDQUFBRSxTQUFBO0lBQUFjLFFBQUEsR0FDTCxDQUFDWixPQUFPLElBQUlOLElBQUEsQ0FBQ04sSUFBSTtNQUFDeUIsS0FBSyxFQUFDLE9BQU87TUFBQUQsUUFBQSxFQUFDO0lBQThDLEVBQU8sRUFDckYsQ0FBQ1osT0FBTyxJQUFJTixJQUFBLENBQUNMLFdBQVc7TUFBQ3lCLEtBQUssRUFBRXRCLFFBQVM7TUFBQ3VCLFFBQVEsRUFBRVQ7SUFBbUIsRUFBRyxFQUMxRU4sT0FBTyxJQUFJTixJQUFBLENBQUNOLElBQUk7TUFBQ3lCLEtBQUssRUFBQyxPQUFPO01BQUFELFFBQUEsRUFBQztJQUFtQyxFQUFPLEVBQ3pFWixPQUFPLElBQUlOLElBQUEsQ0FBQ0osU0FBUztNQUFDa0IsS0FBSyxFQUFFTixRQUFTO01BQUNjLFFBQVEsRUFBRUwsZ0JBQWlCO01BQUNNLFFBQVEsRUFBRVI7SUFBWSxFQUFHLEVBQzNGTCxPQUFPLElBQUlSLEtBQUEsQ0FBQ1IsSUFBSTtNQUFDeUIsS0FBSyxFQUFDLE1BQU07TUFBQUQsUUFBQSxHQUFDbEIsSUFBQSxDQUFDSCxPQUFPO1FBQUMyQixJQUFJLEVBQUM7TUFBTSxFQUFHLHdDQUFzQztJQUFBLEVBQU87RUFBQSxFQUNsRztBQUVKLENBQUM7QUFDRC9CLE1BQU0sQ0FBQ08sSUFBQSxDQUFDSyxJQUFJLEtBQUcsQ0FBQyJ9