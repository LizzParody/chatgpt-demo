#!/usr/bin/env NODE_NO_WARNINGS=1 node --loader=import-jsx
import React, { useState, useEffect } from 'react';
import { render, Text } from 'ink';
import SelectInput from 'ink-select-input';
import TextInput from 'ink-text-input';
import Spinner from 'ink-spinner';
import { chatbots } from './utils';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
const Demo = () => {
  const [chatbot, setChatbot] = useState('');
  const [question, setQuestion] = useState('');
  const [loading, setLoading] = useState(false);
  const setSelectedChatbot = option => {
    setChatbot(option.value);
  };
  const askQuestion = input => {
    setLoading(true);
  };
  const onQuestionChange = question => {
    setQuestion(question);
  };
  return _jsxs(_Fragment, {
    children: [!chatbot && _jsx(Text, {
      color: "green",
      children: "What type of chatbot would you like to create?"
    }), !chatbot && _jsx(SelectInput, {
      items: chatbots,
      onSelect: setSelectedChatbot
    }), chatbot && _jsx(Text, {
      color: "green",
      children: "Perfect!, now tell me your question"
    }), chatbot && _jsx(TextInput, {
      value: question,
      onChange: onQuestionChange,
      onSubmit: askQuestion
    }), loading && _jsxs(Text, {
      color: "blue",
      children: [_jsx(Spinner, {
        type: "flip"
      }), "\xA0Wait a moment, asking to ChatGPT"]
    })]
  });
};
render(_jsx(Demo, {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwicmVuZGVyIiwiVGV4dCIsIlNlbGVjdElucHV0IiwiVGV4dElucHV0IiwiU3Bpbm5lciIsImNoYXRib3RzIiwianN4IiwiX2pzeCIsImpzeHMiLCJfanN4cyIsIkZyYWdtZW50IiwiX0ZyYWdtZW50IiwiRGVtbyIsImNoYXRib3QiLCJzZXRDaGF0Ym90IiwicXVlc3Rpb24iLCJzZXRRdWVzdGlvbiIsImxvYWRpbmciLCJzZXRMb2FkaW5nIiwic2V0U2VsZWN0ZWRDaGF0Ym90Iiwib3B0aW9uIiwidmFsdWUiLCJhc2tRdWVzdGlvbiIsImlucHV0Iiwib25RdWVzdGlvbkNoYW5nZSIsImNoaWxkcmVuIiwiY29sb3IiLCJpdGVtcyIsIm9uU2VsZWN0Iiwib25DaGFuZ2UiLCJvblN1Ym1pdCIsInR5cGUiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBOT0RFX05PX1dBUk5JTkdTPTEgbm9kZSAtLWxvYWRlcj1pbXBvcnQtanN4XG5cbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBUZXh0IH0gZnJvbSAnaW5rJztcbmltcG9ydCBTZWxlY3RJbnB1dCBmcm9tICdpbmstc2VsZWN0LWlucHV0JztcbmltcG9ydCBUZXh0SW5wdXQgZnJvbSAnaW5rLXRleHQtaW5wdXQnO1xuaW1wb3J0IFNwaW5uZXIgZnJvbSAnaW5rLXNwaW5uZXInO1xuXG5pbXBvcnQgeyBjaGF0Ym90cyB9IGZyb20gJy4vdXRpbHMnXG5cblxuY29uc3QgRGVtbyA9ICgpID0+IHtcblx0Y29uc3QgW2NoYXRib3QsIHNldENoYXRib3RdID0gdXNlU3RhdGUoJycpXG5cdGNvbnN0IFtxdWVzdGlvbiwgc2V0UXVlc3Rpb25dID0gdXNlU3RhdGUoJycpXG5cdGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKGZhbHNlKVxuXG5cdGNvbnN0IHNldFNlbGVjdGVkQ2hhdGJvdCA9IChvcHRpb24pID0+IHtcblx0XHRzZXRDaGF0Ym90KG9wdGlvbi52YWx1ZSlcblx0fVxuXG5cdGNvbnN0IGFza1F1ZXN0aW9uID0gKGlucHV0KSA9PiB7XG5cdFx0c2V0TG9hZGluZyh0cnVlKVxuXHR9XG5cblx0Y29uc3Qgb25RdWVzdGlvbkNoYW5nZSA9IChxdWVzdGlvbikgPT4ge1xuXHRcdHNldFF1ZXN0aW9uKHF1ZXN0aW9uKVxuXHR9XG5cblx0cmV0dXJuIDw+XG5cdFx0eyFjaGF0Ym90ICYmIDxUZXh0IGNvbG9yPVwiZ3JlZW5cIj5XaGF0IHR5cGUgb2YgY2hhdGJvdCB3b3VsZCB5b3UgbGlrZSB0byBjcmVhdGU/PC9UZXh0PiB9XG5cdFx0eyFjaGF0Ym90ICYmIDxTZWxlY3RJbnB1dCBpdGVtcz17Y2hhdGJvdHN9IG9uU2VsZWN0PXtzZXRTZWxlY3RlZENoYXRib3R9IC8+IH1cblx0XHR7Y2hhdGJvdCAmJiA8VGV4dCBjb2xvcj1cImdyZWVuXCI+UGVyZmVjdCEsIG5vdyB0ZWxsIG1lIHlvdXIgcXVlc3Rpb248L1RleHQ+IH1cblx0XHR7Y2hhdGJvdCAmJiA8VGV4dElucHV0IHZhbHVlPXtxdWVzdGlvbn0gb25DaGFuZ2U9e29uUXVlc3Rpb25DaGFuZ2V9IG9uU3VibWl0PXthc2tRdWVzdGlvbn0gLz59XG5cdFx0eyBsb2FkaW5nICYmIDxUZXh0IGNvbG9yPVwiYmx1ZVwiPjxTcGlubmVyIHR5cGU9J2ZsaXAnIC8+Jm5ic3A7V2FpdCBhIG1vbWVudCwgYXNraW5nIHRvIENoYXRHUFQ8L1RleHQ+fVxuXHQ8Lz5cblxufTtcbnJlbmRlcig8RGVtbyAvPik7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE9BQU9BLEtBQUssSUFBSUMsUUFBUSxFQUFFQyxTQUFTLFFBQVEsT0FBTztBQUNsRCxTQUFTQyxNQUFNLEVBQUVDLElBQUksUUFBUSxLQUFLO0FBQ2xDLE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7QUFDMUMsT0FBT0MsU0FBUyxNQUFNLGdCQUFnQjtBQUN0QyxPQUFPQyxPQUFPLE1BQU0sYUFBYTtBQUVqQyxTQUFTQyxRQUFRLFFBQVEsU0FBUztBQUFBLFNBQUFDLEdBQUEsSUFBQUMsSUFBQTtBQUFBLFNBQUFDLElBQUEsSUFBQUMsS0FBQTtBQUFBLFNBQUFDLFFBQUEsSUFBQUMsU0FBQTtBQUdsQyxNQUFNQyxJQUFJLEdBQUdBLENBQUEsS0FBTTtFQUNsQixNQUFNLENBQUNDLE9BQU8sRUFBRUMsVUFBVSxDQUFDLEdBQUdoQixRQUFRLENBQUMsRUFBRSxDQUFDO0VBQzFDLE1BQU0sQ0FBQ2lCLFFBQVEsRUFBRUMsV0FBVyxDQUFDLEdBQUdsQixRQUFRLENBQUMsRUFBRSxDQUFDO0VBQzVDLE1BQU0sQ0FBQ21CLE9BQU8sRUFBRUMsVUFBVSxDQUFDLEdBQUdwQixRQUFRLENBQUMsS0FBSyxDQUFDO0VBRTdDLE1BQU1xQixrQkFBa0IsR0FBSUMsTUFBTSxJQUFLO0lBQ3RDTixVQUFVLENBQUNNLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDO0VBQ3pCLENBQUM7RUFFRCxNQUFNQyxXQUFXLEdBQUlDLEtBQUssSUFBSztJQUM5QkwsVUFBVSxDQUFDLElBQUksQ0FBQztFQUNqQixDQUFDO0VBRUQsTUFBTU0sZ0JBQWdCLEdBQUlULFFBQVEsSUFBSztJQUN0Q0MsV0FBVyxDQUFDRCxRQUFRLENBQUM7RUFDdEIsQ0FBQztFQUVELE9BQU9OLEtBQUEsQ0FBQUUsU0FBQTtJQUFBYyxRQUFBLEdBQ0wsQ0FBQ1osT0FBTyxJQUFJTixJQUFBLENBQUNOLElBQUk7TUFBQ3lCLEtBQUssRUFBQyxPQUFPO01BQUFELFFBQUEsRUFBQztJQUE4QyxFQUFPLEVBQ3JGLENBQUNaLE9BQU8sSUFBSU4sSUFBQSxDQUFDTCxXQUFXO01BQUN5QixLQUFLLEVBQUV0QixRQUFTO01BQUN1QixRQUFRLEVBQUVUO0lBQW1CLEVBQUcsRUFDMUVOLE9BQU8sSUFBSU4sSUFBQSxDQUFDTixJQUFJO01BQUN5QixLQUFLLEVBQUMsT0FBTztNQUFBRCxRQUFBLEVBQUM7SUFBbUMsRUFBTyxFQUN6RVosT0FBTyxJQUFJTixJQUFBLENBQUNKLFNBQVM7TUFBQ2tCLEtBQUssRUFBRU4sUUFBUztNQUFDYyxRQUFRLEVBQUVMLGdCQUFpQjtNQUFDTSxRQUFRLEVBQUVSO0lBQVksRUFBRyxFQUMzRkwsT0FBTyxJQUFJUixLQUFBLENBQUNSLElBQUk7TUFBQ3lCLEtBQUssRUFBQyxNQUFNO01BQUFELFFBQUEsR0FBQ2xCLElBQUEsQ0FBQ0gsT0FBTztRQUFDMkIsSUFBSSxFQUFDO01BQU0sRUFBRyx3Q0FBc0M7SUFBQSxFQUFPO0VBQUEsRUFDbEc7QUFFSixDQUFDO0FBQ0QvQixNQUFNLENBQUNPLElBQUEsQ0FBQ0ssSUFBSSxLQUFHLENBQUMifQ==