#!/usr/bin/env NODE_NO_WARNINGS=1 node --loader=import-jsx
import React, { useState, useEffect } from 'react';
import { render, Text } from 'ink';
import SelectInput from 'ink-select-input';
import TextInput from 'ink-text-input';
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const Demo = () => {
  const [chatbot, setChatbot] = useState('');
  const [question, setQuestion] = useState();
  const setSelectedChatbot = option => {
    setChatbot(option.value);
  };
  const items = [{
    label: 'Leonardo Davinci',
    value: 'leonardo davinci'
  }, {
    label: 'Physics professor',
    value: 'Physics professor'
  }, {
    label: 'King of England',
    value: 'king of england'
  }];
  return _jsxs(_Fragment, {
    children: [!chatbot && _jsx(Text, {
      color: "green",
      children: "What type of chatbot would you like to create?"
    }), !chatbot && _jsx(SelectInput, {
      items: items,
      onSelect: setSelectedChatbot
    }), chatbot && _jsx(Text, {
      color: "green",
      children: "Perfect!, now tell me your question"
    }), chatbot && _jsx(TextInput, {
      value: chatbot,
      onChange: setChatbot,
      onSubmit: setSelectedChatbot
    })]
  });
};
render(_jsx(Demo, {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwicmVuZGVyIiwiVGV4dCIsIlNlbGVjdElucHV0IiwiVGV4dElucHV0IiwianN4IiwiX2pzeCIsIkZyYWdtZW50IiwiX0ZyYWdtZW50IiwianN4cyIsIl9qc3hzIiwiRGVtbyIsImNoYXRib3QiLCJzZXRDaGF0Ym90IiwicXVlc3Rpb24iLCJzZXRRdWVzdGlvbiIsInNldFNlbGVjdGVkQ2hhdGJvdCIsIm9wdGlvbiIsInZhbHVlIiwiaXRlbXMiLCJsYWJlbCIsImNoaWxkcmVuIiwiY29sb3IiLCJvblNlbGVjdCIsIm9uQ2hhbmdlIiwib25TdWJtaXQiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBOT0RFX05PX1dBUk5JTkdTPTEgbm9kZSAtLWxvYWRlcj1pbXBvcnQtanN4XG5cbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBUZXh0IH0gZnJvbSAnaW5rJztcbmltcG9ydCBTZWxlY3RJbnB1dCBmcm9tICdpbmstc2VsZWN0LWlucHV0JztcbmltcG9ydCBUZXh0SW5wdXQgZnJvbSAnaW5rLXRleHQtaW5wdXQnO1xuXG5cbmNvbnN0IERlbW8gPSAoKSA9PiB7XG5cdGNvbnN0IFtjaGF0Ym90LCBzZXRDaGF0Ym90XSA9IHVzZVN0YXRlKCcnKVxuXHRjb25zdCBbcXVlc3Rpb24sIHNldFF1ZXN0aW9uXSA9IHVzZVN0YXRlKClcblxuXHRjb25zdCBzZXRTZWxlY3RlZENoYXRib3QgPSAob3B0aW9uKSA9PiB7XG5cdFx0c2V0Q2hhdGJvdChvcHRpb24udmFsdWUpXG5cdH1cblxuXG5cdGNvbnN0IGl0ZW1zID0gW1xuXHRcdHtcblx0XHRcdGxhYmVsOiAnTGVvbmFyZG8gRGF2aW5jaScsXG5cdFx0XHR2YWx1ZTogJ2xlb25hcmRvIGRhdmluY2knXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRsYWJlbDogJ1BoeXNpY3MgcHJvZmVzc29yJyxcblx0XHRcdHZhbHVlOiAnUGh5c2ljcyBwcm9mZXNzb3InXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRsYWJlbDogJ0tpbmcgb2YgRW5nbGFuZCcsXG5cdFx0XHR2YWx1ZTogJ2tpbmcgb2YgZW5nbGFuZCdcblx0XHR9XG5cdF07XG5cblx0cmV0dXJuIDw+XG5cdFx0eyFjaGF0Ym90ICYmIDxUZXh0IGNvbG9yPVwiZ3JlZW5cIj5XaGF0IHR5cGUgb2YgY2hhdGJvdCB3b3VsZCB5b3UgbGlrZSB0byBjcmVhdGU/PC9UZXh0PiB9XG5cdFx0eyFjaGF0Ym90ICYmIDxTZWxlY3RJbnB1dCBpdGVtcz17aXRlbXN9IG9uU2VsZWN0PXtzZXRTZWxlY3RlZENoYXRib3R9IC8+IH1cblx0XHR7Y2hhdGJvdCAmJiA8VGV4dCBjb2xvcj1cImdyZWVuXCI+UGVyZmVjdCEsIG5vdyB0ZWxsIG1lIHlvdXIgcXVlc3Rpb248L1RleHQ+IH1cblx0XHR7Y2hhdGJvdCAmJiA8VGV4dElucHV0IHZhbHVlPXtjaGF0Ym90fSBvbkNoYW5nZT17c2V0Q2hhdGJvdH0gb25TdWJtaXQ9e3NldFNlbGVjdGVkQ2hhdGJvdH0gLz59XG5cdDwvPlxuXG59O1xucmVuZGVyKDxEZW1vIC8+KTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBRUEsT0FBT0EsS0FBSyxJQUFJQyxRQUFRLEVBQUVDLFNBQVMsUUFBUSxPQUFPO0FBQ2xELFNBQVNDLE1BQU0sRUFBRUMsSUFBSSxRQUFRLEtBQUs7QUFDbEMsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQUMxQyxPQUFPQyxTQUFTLE1BQU0sZ0JBQWdCO0FBQUMsU0FBQUMsR0FBQSxJQUFBQyxJQUFBO0FBQUEsU0FBQUMsUUFBQSxJQUFBQyxTQUFBO0FBQUEsU0FBQUMsSUFBQSxJQUFBQyxLQUFBO0FBR3ZDLE1BQU1DLElBQUksR0FBR0EsQ0FBQSxLQUFNO0VBQ2xCLE1BQU0sQ0FBQ0MsT0FBTyxFQUFFQyxVQUFVLENBQUMsR0FBR2QsUUFBUSxDQUFDLEVBQUUsQ0FBQztFQUMxQyxNQUFNLENBQUNlLFFBQVEsRUFBRUMsV0FBVyxDQUFDLEdBQUdoQixRQUFRLEVBQUU7RUFFMUMsTUFBTWlCLGtCQUFrQixHQUFJQyxNQUFNLElBQUs7SUFDdENKLFVBQVUsQ0FBQ0ksTUFBTSxDQUFDQyxLQUFLLENBQUM7RUFDekIsQ0FBQztFQUdELE1BQU1DLEtBQUssR0FBRyxDQUNiO0lBQ0NDLEtBQUssRUFBRSxrQkFBa0I7SUFDekJGLEtBQUssRUFBRTtFQUNSLENBQUMsRUFDRDtJQUNDRSxLQUFLLEVBQUUsbUJBQW1CO0lBQzFCRixLQUFLLEVBQUU7RUFDUixDQUFDLEVBQ0Q7SUFDQ0UsS0FBSyxFQUFFLGlCQUFpQjtJQUN4QkYsS0FBSyxFQUFFO0VBQ1IsQ0FBQyxDQUNEO0VBRUQsT0FBT1IsS0FBQSxDQUFBRixTQUFBO0lBQUFhLFFBQUEsR0FDTCxDQUFDVCxPQUFPLElBQUlOLElBQUEsQ0FBQ0osSUFBSTtNQUFDb0IsS0FBSyxFQUFDLE9BQU87TUFBQUQsUUFBQSxFQUFDO0lBQThDLEVBQU8sRUFDckYsQ0FBQ1QsT0FBTyxJQUFJTixJQUFBLENBQUNILFdBQVc7TUFBQ2dCLEtBQUssRUFBRUEsS0FBTTtNQUFDSSxRQUFRLEVBQUVQO0lBQW1CLEVBQUcsRUFDdkVKLE9BQU8sSUFBSU4sSUFBQSxDQUFDSixJQUFJO01BQUNvQixLQUFLLEVBQUMsT0FBTztNQUFBRCxRQUFBLEVBQUM7SUFBbUMsRUFBTyxFQUN6RVQsT0FBTyxJQUFJTixJQUFBLENBQUNGLFNBQVM7TUFBQ2MsS0FBSyxFQUFFTixPQUFRO01BQUNZLFFBQVEsRUFBRVgsVUFBVztNQUFDWSxRQUFRLEVBQUVUO0lBQW1CLEVBQUc7RUFBQSxFQUMzRjtBQUVKLENBQUM7QUFDRGYsTUFBTSxDQUFDSyxJQUFBLENBQUNLLElBQUksS0FBRyxDQUFDIn0=