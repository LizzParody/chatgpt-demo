#!/usr/bin/env NODE_NO_WARNINGS=1 node --loader=import-jsx
import React, { useState, useEffect } from 'react';
import { render, Text } from 'ink';
import SelectInput from 'ink-select-input';
import TextInput from 'ink-text-input';
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const Demo = () => {
  const [chatbot, setChatbot] = useState('');
  const [question, setQuestion] = useState();
  const setSelectedChatbot = option => {
    setChatbot(option.value);
  };
  const askQuestion = input => {
    console.log(input);
  };
  const onQuestionChange = question => {
    console.log(question);
    setQuestion(question);
  };
  const items = [{
    label: 'Leonardo Davinci',
    value: 'leonardo davinci'
  }, {
    label: 'Physics professor',
    value: 'Physics professor'
  }, {
    label: 'King of England',
    value: 'king of england'
  }];
  return _jsxs(_Fragment, {
    children: [!chatbot && _jsx(Text, {
      color: "green",
      children: "What type of chatbot would you like to create?"
    }), !chatbot && _jsx(SelectInput, {
      items: items,
      onSelect: setSelectedChatbot
    }), chatbot && _jsx(Text, {
      color: "green",
      children: "Perfect!, now tell me your question"
    }), chatbot && _jsx(TextInput, {
      value: question,
      onChange: onQuestionChange,
      onSubmit: askQuestion
    })]
  });
};
render(_jsx(Demo, {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwicmVuZGVyIiwiVGV4dCIsIlNlbGVjdElucHV0IiwiVGV4dElucHV0IiwianN4IiwiX2pzeCIsIkZyYWdtZW50IiwiX0ZyYWdtZW50IiwianN4cyIsIl9qc3hzIiwiRGVtbyIsImNoYXRib3QiLCJzZXRDaGF0Ym90IiwicXVlc3Rpb24iLCJzZXRRdWVzdGlvbiIsInNldFNlbGVjdGVkQ2hhdGJvdCIsIm9wdGlvbiIsInZhbHVlIiwiYXNrUXVlc3Rpb24iLCJpbnB1dCIsImNvbnNvbGUiLCJsb2ciLCJvblF1ZXN0aW9uQ2hhbmdlIiwiaXRlbXMiLCJsYWJlbCIsImNoaWxkcmVuIiwiY29sb3IiLCJvblNlbGVjdCIsIm9uQ2hhbmdlIiwib25TdWJtaXQiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBOT0RFX05PX1dBUk5JTkdTPTEgbm9kZSAtLWxvYWRlcj1pbXBvcnQtanN4XG5cbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBUZXh0IH0gZnJvbSAnaW5rJztcbmltcG9ydCBTZWxlY3RJbnB1dCBmcm9tICdpbmstc2VsZWN0LWlucHV0JztcbmltcG9ydCBUZXh0SW5wdXQgZnJvbSAnaW5rLXRleHQtaW5wdXQnO1xuXG5cbmNvbnN0IERlbW8gPSAoKSA9PiB7XG5cdGNvbnN0IFtjaGF0Ym90LCBzZXRDaGF0Ym90XSA9IHVzZVN0YXRlKCcnKVxuXHRjb25zdCBbcXVlc3Rpb24sIHNldFF1ZXN0aW9uXSA9IHVzZVN0YXRlKClcblxuXHRjb25zdCBzZXRTZWxlY3RlZENoYXRib3QgPSAob3B0aW9uKSA9PiB7XG5cdFx0c2V0Q2hhdGJvdChvcHRpb24udmFsdWUpXG5cdH1cblxuXHRjb25zdCBhc2tRdWVzdGlvbiA9IChpbnB1dCkgPT4ge1xuXHRcdGNvbnNvbGUubG9nKGlucHV0KVxuXHR9XG5cblx0Y29uc3Qgb25RdWVzdGlvbkNoYW5nZSA9IChxdWVzdGlvbikgPT4ge1xuXHRcdGNvbnNvbGUubG9nKHF1ZXN0aW9uKVxuXHRcdHNldFF1ZXN0aW9uKHF1ZXN0aW9uKVxuXHR9XG5cblxuXHRjb25zdCBpdGVtcyA9IFtcblx0XHR7XG5cdFx0XHRsYWJlbDogJ0xlb25hcmRvIERhdmluY2knLFxuXHRcdFx0dmFsdWU6ICdsZW9uYXJkbyBkYXZpbmNpJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdFx0bGFiZWw6ICdQaHlzaWNzIHByb2Zlc3NvcicsXG5cdFx0XHR2YWx1ZTogJ1BoeXNpY3MgcHJvZmVzc29yJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdFx0bGFiZWw6ICdLaW5nIG9mIEVuZ2xhbmQnLFxuXHRcdFx0dmFsdWU6ICdraW5nIG9mIGVuZ2xhbmQnXG5cdFx0fVxuXHRdO1xuXG5cdHJldHVybiA8PlxuXHRcdHshY2hhdGJvdCAmJiA8VGV4dCBjb2xvcj1cImdyZWVuXCI+V2hhdCB0eXBlIG9mIGNoYXRib3Qgd291bGQgeW91IGxpa2UgdG8gY3JlYXRlPzwvVGV4dD4gfVxuXHRcdHshY2hhdGJvdCAmJiA8U2VsZWN0SW5wdXQgaXRlbXM9e2l0ZW1zfSBvblNlbGVjdD17c2V0U2VsZWN0ZWRDaGF0Ym90fSAvPiB9XG5cdFx0e2NoYXRib3QgJiYgPFRleHQgY29sb3I9XCJncmVlblwiPlBlcmZlY3QhLCBub3cgdGVsbCBtZSB5b3VyIHF1ZXN0aW9uPC9UZXh0PiB9XG5cdFx0e2NoYXRib3QgJiYgPFRleHRJbnB1dCB2YWx1ZT17cXVlc3Rpb259IG9uQ2hhbmdlPXtvblF1ZXN0aW9uQ2hhbmdlfSBvblN1Ym1pdD17YXNrUXVlc3Rpb259IC8+fVxuXHQ8Lz5cblxufTtcbnJlbmRlcig8RGVtbyAvPik7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE9BQU9BLEtBQUssSUFBSUMsUUFBUSxFQUFFQyxTQUFTLFFBQVEsT0FBTztBQUNsRCxTQUFTQyxNQUFNLEVBQUVDLElBQUksUUFBUSxLQUFLO0FBQ2xDLE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7QUFDMUMsT0FBT0MsU0FBUyxNQUFNLGdCQUFnQjtBQUFDLFNBQUFDLEdBQUEsSUFBQUMsSUFBQTtBQUFBLFNBQUFDLFFBQUEsSUFBQUMsU0FBQTtBQUFBLFNBQUFDLElBQUEsSUFBQUMsS0FBQTtBQUd2QyxNQUFNQyxJQUFJLEdBQUdBLENBQUEsS0FBTTtFQUNsQixNQUFNLENBQUNDLE9BQU8sRUFBRUMsVUFBVSxDQUFDLEdBQUdkLFFBQVEsQ0FBQyxFQUFFLENBQUM7RUFDMUMsTUFBTSxDQUFDZSxRQUFRLEVBQUVDLFdBQVcsQ0FBQyxHQUFHaEIsUUFBUSxFQUFFO0VBRTFDLE1BQU1pQixrQkFBa0IsR0FBSUMsTUFBTSxJQUFLO0lBQ3RDSixVQUFVLENBQUNJLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDO0VBQ3pCLENBQUM7RUFFRCxNQUFNQyxXQUFXLEdBQUlDLEtBQUssSUFBSztJQUM5QkMsT0FBTyxDQUFDQyxHQUFHLENBQUNGLEtBQUssQ0FBQztFQUNuQixDQUFDO0VBRUQsTUFBTUcsZ0JBQWdCLEdBQUlULFFBQVEsSUFBSztJQUN0Q08sT0FBTyxDQUFDQyxHQUFHLENBQUNSLFFBQVEsQ0FBQztJQUNyQkMsV0FBVyxDQUFDRCxRQUFRLENBQUM7RUFDdEIsQ0FBQztFQUdELE1BQU1VLEtBQUssR0FBRyxDQUNiO0lBQ0NDLEtBQUssRUFBRSxrQkFBa0I7SUFDekJQLEtBQUssRUFBRTtFQUNSLENBQUMsRUFDRDtJQUNDTyxLQUFLLEVBQUUsbUJBQW1CO0lBQzFCUCxLQUFLLEVBQUU7RUFDUixDQUFDLEVBQ0Q7SUFDQ08sS0FBSyxFQUFFLGlCQUFpQjtJQUN4QlAsS0FBSyxFQUFFO0VBQ1IsQ0FBQyxDQUNEO0VBRUQsT0FBT1IsS0FBQSxDQUFBRixTQUFBO0lBQUFrQixRQUFBLEdBQ0wsQ0FBQ2QsT0FBTyxJQUFJTixJQUFBLENBQUNKLElBQUk7TUFBQ3lCLEtBQUssRUFBQyxPQUFPO01BQUFELFFBQUEsRUFBQztJQUE4QyxFQUFPLEVBQ3JGLENBQUNkLE9BQU8sSUFBSU4sSUFBQSxDQUFDSCxXQUFXO01BQUNxQixLQUFLLEVBQUVBLEtBQU07TUFBQ0ksUUFBUSxFQUFFWjtJQUFtQixFQUFHLEVBQ3ZFSixPQUFPLElBQUlOLElBQUEsQ0FBQ0osSUFBSTtNQUFDeUIsS0FBSyxFQUFDLE9BQU87TUFBQUQsUUFBQSxFQUFDO0lBQW1DLEVBQU8sRUFDekVkLE9BQU8sSUFBSU4sSUFBQSxDQUFDRixTQUFTO01BQUNjLEtBQUssRUFBRUosUUFBUztNQUFDZSxRQUFRLEVBQUVOLGdCQUFpQjtNQUFDTyxRQUFRLEVBQUVYO0lBQVksRUFBRztFQUFBLEVBQzNGO0FBRUosQ0FBQztBQUNEbEIsTUFBTSxDQUFDSyxJQUFBLENBQUNLLElBQUksS0FBRyxDQUFDIn0=