#!/usr/bin/env NODE_NO_WARNINGS=1 node --loader=import-jsx
import React, { useState, useEffect } from 'react';
import { render, Text } from 'ink';
import SelectInput from 'ink-select-input';
import TextInput from 'ink-text-input';
import Spinner from 'ink-spinner';
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const Demo = () => {
  const [chatbot, setChatbot] = useState('');
  const [question, setQuestion] = useState('');
  const [loading, setLoading] = useState(false);
  const setSelectedChatbot = option => {
    setChatbot(option.value);
  };
  const askQuestion = input => {
    setLoading(true);
  };
  const onQuestionChange = question => {
    setQuestion(question);
  };
  const items = [{
    label: 'Leonardo Davinci',
    value: 'leonardo davinci'
  }, {
    label: 'Physics professor',
    value: 'Physics professor'
  }, {
    label: 'King of England',
    value: 'king of england'
  }];
  return _jsxs(_Fragment, {
    children: [!chatbot && _jsx(Text, {
      color: "green",
      children: "What type of chatbot would you like to create?"
    }), !chatbot && _jsx(SelectInput, {
      items: items,
      onSelect: setSelectedChatbot
    }), chatbot && _jsx(Text, {
      color: "green",
      children: "Perfect!, now tell me your question"
    }), chatbot && _jsx(TextInput, {
      value: question,
      onChange: onQuestionChange,
      onSubmit: askQuestion
    }), loading && _jsx(Text, {
      color: "green",
      children: _jsx(Spinner, {
        type: "flip"
      })
    })]
  });
};
render(_jsx(Demo, {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwicmVuZGVyIiwiVGV4dCIsIlNlbGVjdElucHV0IiwiVGV4dElucHV0IiwiU3Bpbm5lciIsImpzeCIsIl9qc3giLCJGcmFnbWVudCIsIl9GcmFnbWVudCIsImpzeHMiLCJfanN4cyIsIkRlbW8iLCJjaGF0Ym90Iiwic2V0Q2hhdGJvdCIsInF1ZXN0aW9uIiwic2V0UXVlc3Rpb24iLCJsb2FkaW5nIiwic2V0TG9hZGluZyIsInNldFNlbGVjdGVkQ2hhdGJvdCIsIm9wdGlvbiIsInZhbHVlIiwiYXNrUXVlc3Rpb24iLCJpbnB1dCIsIm9uUXVlc3Rpb25DaGFuZ2UiLCJpdGVtcyIsImxhYmVsIiwiY2hpbGRyZW4iLCJjb2xvciIsIm9uU2VsZWN0Iiwib25DaGFuZ2UiLCJvblN1Ym1pdCIsInR5cGUiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBOT0RFX05PX1dBUk5JTkdTPTEgbm9kZSAtLWxvYWRlcj1pbXBvcnQtanN4XG5cbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBUZXh0IH0gZnJvbSAnaW5rJztcbmltcG9ydCBTZWxlY3RJbnB1dCBmcm9tICdpbmstc2VsZWN0LWlucHV0JztcbmltcG9ydCBUZXh0SW5wdXQgZnJvbSAnaW5rLXRleHQtaW5wdXQnO1xuaW1wb3J0IFNwaW5uZXIgZnJvbSAnaW5rLXNwaW5uZXInO1xuXG5cbmNvbnN0IERlbW8gPSAoKSA9PiB7XG5cdGNvbnN0IFtjaGF0Ym90LCBzZXRDaGF0Ym90XSA9IHVzZVN0YXRlKCcnKVxuXHRjb25zdCBbcXVlc3Rpb24sIHNldFF1ZXN0aW9uXSA9IHVzZVN0YXRlKCcnKVxuXHRjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZShmYWxzZSlcblxuXHRjb25zdCBzZXRTZWxlY3RlZENoYXRib3QgPSAob3B0aW9uKSA9PiB7XG5cdFx0c2V0Q2hhdGJvdChvcHRpb24udmFsdWUpXG5cdH1cblxuXHRjb25zdCBhc2tRdWVzdGlvbiA9IChpbnB1dCkgPT4ge1xuXHRcdHNldExvYWRpbmcodHJ1ZSlcblx0fVxuXG5cdGNvbnN0IG9uUXVlc3Rpb25DaGFuZ2UgPSAocXVlc3Rpb24pID0+IHtcblx0XHRzZXRRdWVzdGlvbihxdWVzdGlvbilcblx0fVxuXG5cblx0Y29uc3QgaXRlbXMgPSBbXG5cdFx0e1xuXHRcdFx0bGFiZWw6ICdMZW9uYXJkbyBEYXZpbmNpJyxcblx0XHRcdHZhbHVlOiAnbGVvbmFyZG8gZGF2aW5jaSdcblx0XHR9LFxuXHRcdHtcblx0XHRcdGxhYmVsOiAnUGh5c2ljcyBwcm9mZXNzb3InLFxuXHRcdFx0dmFsdWU6ICdQaHlzaWNzIHByb2Zlc3Nvcidcblx0XHR9LFxuXHRcdHtcblx0XHRcdGxhYmVsOiAnS2luZyBvZiBFbmdsYW5kJyxcblx0XHRcdHZhbHVlOiAna2luZyBvZiBlbmdsYW5kJ1xuXHRcdH1cblx0XTtcblxuXHRyZXR1cm4gPD5cblx0XHR7IWNoYXRib3QgJiYgPFRleHQgY29sb3I9XCJncmVlblwiPldoYXQgdHlwZSBvZiBjaGF0Ym90IHdvdWxkIHlvdSBsaWtlIHRvIGNyZWF0ZT88L1RleHQ+IH1cblx0XHR7IWNoYXRib3QgJiYgPFNlbGVjdElucHV0IGl0ZW1zPXtpdGVtc30gb25TZWxlY3Q9e3NldFNlbGVjdGVkQ2hhdGJvdH0gLz4gfVxuXHRcdHtjaGF0Ym90ICYmIDxUZXh0IGNvbG9yPVwiZ3JlZW5cIj5QZXJmZWN0ISwgbm93IHRlbGwgbWUgeW91ciBxdWVzdGlvbjwvVGV4dD4gfVxuXHRcdHtjaGF0Ym90ICYmIDxUZXh0SW5wdXQgdmFsdWU9e3F1ZXN0aW9ufSBvbkNoYW5nZT17b25RdWVzdGlvbkNoYW5nZX0gb25TdWJtaXQ9e2Fza1F1ZXN0aW9ufSAvPn1cblx0XHR7IGxvYWRpbmcgJiYgPFRleHQgY29sb3I9XCJncmVlblwiPjxTcGlubmVyIHR5cGU9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