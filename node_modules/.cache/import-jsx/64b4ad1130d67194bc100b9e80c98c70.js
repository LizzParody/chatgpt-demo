#!/usr/bin/env NODE_NO_WARNINGS=1 node --loader=import-jsx
import React, { useState, useEffect } from 'react';
import { render, Text } from 'ink';
import SelectInput from 'ink-select-input';
import TextInput from 'ink-text-input';
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const Demo = () => {
  const [chatbot, setChatbot] = useState('');
  const [question, setQuestion] = useState();
  const setSelectedChatbot = option => {
    console.log(option);
    setChatbot(option.value);
  };
  const handleSelect = item => {
    console.log('you selected', item);
  };
  const items = [{
    label: 'Leonardo Davinci',
    value: 'leonardo davinci'
  }, {
    label: 'Physics professor',
    value: 'Physics professor'
  }, {
    label: 'Third',
    value: 'third'
  }];
  return _jsxs(_Fragment, {
    children: [_jsx(Text, {
      color: "green",
      children: "What type of chatbot would you like to create?"
    }), _jsx(SelectInput, {
      items: items,
      onSelect: handleSelect
    }), chatbot && _jsx(Text, {
      color: "green",
      children: "Tell me your question"
    }), chatbot && _jsx(TextInput, {
      value: chatbot,
      onChange: setChatbot,
      onSubmit: setSelectedChatbot
    })]
  });
};
render(_jsx(Demo, {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwicmVuZGVyIiwiVGV4dCIsIlNlbGVjdElucHV0IiwiVGV4dElucHV0IiwianN4IiwiX2pzeCIsIkZyYWdtZW50IiwiX0ZyYWdtZW50IiwianN4cyIsIl9qc3hzIiwiRGVtbyIsImNoYXRib3QiLCJzZXRDaGF0Ym90IiwicXVlc3Rpb24iLCJzZXRRdWVzdGlvbiIsInNldFNlbGVjdGVkQ2hhdGJvdCIsIm9wdGlvbiIsImNvbnNvbGUiLCJsb2ciLCJ2YWx1ZSIsImhhbmRsZVNlbGVjdCIsIml0ZW0iLCJpdGVtcyIsImxhYmVsIiwiY2hpbGRyZW4iLCJjb2xvciIsIm9uU2VsZWN0Iiwib25DaGFuZ2UiLCJvblN1Ym1pdCJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IE5PREVfTk9fV0FSTklOR1M9MSBub2RlIC0tbG9hZGVyPWltcG9ydC1qc3hcblxuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIFRleHQgfSBmcm9tICdpbmsnO1xuaW1wb3J0IFNlbGVjdElucHV0IGZyb20gJ2luay1zZWxlY3QtaW5wdXQnO1xuaW1wb3J0IFRleHRJbnB1dCBmcm9tICdpbmstdGV4dC1pbnB1dCc7XG5cblxuY29uc3QgRGVtbyA9ICgpID0+IHtcblx0Y29uc3QgW2NoYXRib3QsIHNldENoYXRib3RdID0gdXNlU3RhdGUoJycpXG5cdGNvbnN0IFtxdWVzdGlvbiwgc2V0UXVlc3Rpb25dID0gdXNlU3RhdGUoKVxuXG5cdGNvbnN0IHNldFNlbGVjdGVkQ2hhdGJvdCA9IChvcHRpb24pID0+IHtcblx0XHRjb25zb2xlLmxvZyhvcHRpb24pXG5cdFx0c2V0Q2hhdGJvdChvcHRpb24udmFsdWUpXG5cdH1cblxuXHRjb25zdCBoYW5kbGVTZWxlY3QgPSBpdGVtID0+IHtcblx0XHRjb25zb2xlLmxvZygneW91IHNlbGVjdGVkJywgaXRlbSlcblx0fTtcblxuXHRjb25zdCBpdGVtcyA9IFtcblx0XHR7XG5cdFx0XHRsYWJlbDogJ0xlb25hcmRvIERhdmluY2knLFxuXHRcdFx0dmFsdWU6ICdsZW9uYXJkbyBkYXZpbmNpJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdFx0bGFiZWw6ICdQaHlzaWNzIHByb2Zlc3NvcicsXG5cdFx0XHR2YWx1ZTogJ1BoeXNpY3MgcHJvZmVzc29yJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdFx0bGFiZWw6ICdUaGlyZCcsXG5cdFx0XHR2YWx1ZTogJ3RoaXJkJ1xuXHRcdH1cblx0XTtcblxuXHRyZXR1cm4gPD5cblx0XHQ8VGV4dCBjb2xvcj1cImdyZWVuXCI+V2hhdCB0eXBlIG9mIGNoYXRib3Qgd291bGQgeW91IGxpa2UgdG8gY3JlYXRlPzwvVGV4dD5cblx0XHQ8U2VsZWN0SW5wdXQgaXRlbXM9e2l0ZW1zfSBvblNlbGVjdD17aGFuZGxlU2VsZWN0fSAvPlxuXHRcdHtjaGF0Ym90ICYmIDxUZXh0IGNvbG9yPVwiZ3JlZW5cIj5UZWxsIG1lIHlvdXIgcXVlc3Rpb248L1RleHQ+IH1cblx0XHR7Y2hhdGJvdCAmJiA8VGV4dElucHV0IHZhbHVlPXtjaGF0Ym90fSBvbkNoYW5nZT17c2V0Q2hhdGJvdH0gb25TdWJtaXQ9e3NldFNlbGVjdGVkQ2hhdGJvdH0gLz59XG5cdDwvPlxuXG59O1xucmVuZGVyKDxEZW1vIC8+KTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBRUEsT0FBT0EsS0FBSyxJQUFJQyxRQUFRLEVBQUVDLFNBQVMsUUFBUSxPQUFPO0FBQ2xELFNBQVNDLE1BQU0sRUFBRUMsSUFBSSxRQUFRLEtBQUs7QUFDbEMsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQUMxQyxPQUFPQyxTQUFTLE1BQU0sZ0JBQWdCO0FBQUMsU0FBQUMsR0FBQSxJQUFBQyxJQUFBO0FBQUEsU0FBQUMsUUFBQSxJQUFBQyxTQUFBO0FBQUEsU0FBQUMsSUFBQSxJQUFBQyxLQUFBO0FBR3ZDLE1BQU1DLElBQUksR0FBR0EsQ0FBQSxLQUFNO0VBQ2xCLE1BQU0sQ0FBQ0MsT0FBTyxFQUFFQyxVQUFVLENBQUMsR0FBR2QsUUFBUSxDQUFDLEVBQUUsQ0FBQztFQUMxQyxNQUFNLENBQUNlLFFBQVEsRUFBRUMsV0FBVyxDQUFDLEdBQUdoQixRQUFRLEVBQUU7RUFFMUMsTUFBTWlCLGtCQUFrQixHQUFJQyxNQUFNLElBQUs7SUFDdENDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRixNQUFNLENBQUM7SUFDbkJKLFVBQVUsQ0FBQ0ksTUFBTSxDQUFDRyxLQUFLLENBQUM7RUFDekIsQ0FBQztFQUVELE1BQU1DLFlBQVksR0FBR0MsSUFBSSxJQUFJO0lBQzVCSixPQUFPLENBQUNDLEdBQUcsQ0FBQyxjQUFjLEVBQUVHLElBQUksQ0FBQztFQUNsQyxDQUFDO0VBRUQsTUFBTUMsS0FBSyxHQUFHLENBQ2I7SUFDQ0MsS0FBSyxFQUFFLGtCQUFrQjtJQUN6QkosS0FBSyxFQUFFO0VBQ1IsQ0FBQyxFQUNEO0lBQ0NJLEtBQUssRUFBRSxtQkFBbUI7SUFDMUJKLEtBQUssRUFBRTtFQUNSLENBQUMsRUFDRDtJQUNDSSxLQUFLLEVBQUUsT0FBTztJQUNkSixLQUFLLEVBQUU7RUFDUixDQUFDLENBQ0Q7RUFFRCxPQUFPVixLQUFBLENBQUFGLFNBQUE7SUFBQWlCLFFBQUEsR0FDTm5CLElBQUEsQ0FBQ0osSUFBSTtNQUFDd0IsS0FBSyxFQUFDLE9BQU87TUFBQUQsUUFBQSxFQUFDO0lBQThDLEVBQU8sRUFDekVuQixJQUFBLENBQUNILFdBQVc7TUFBQ29CLEtBQUssRUFBRUEsS0FBTTtNQUFDSSxRQUFRLEVBQUVOO0lBQWEsRUFBRyxFQUNwRFQsT0FBTyxJQUFJTixJQUFBLENBQUNKLElBQUk7TUFBQ3dCLEtBQUssRUFBQyxPQUFPO01BQUFELFFBQUEsRUFBQztJQUFxQixFQUFPLEVBQzNEYixPQUFPLElBQUlOLElBQUEsQ0FBQ0YsU0FBUztNQUFDZ0IsS0FBSyxFQUFFUixPQUFRO01BQUNnQixRQUFRLEVBQUVmLFVBQVc7TUFBQ2dCLFFBQVEsRUFBRWI7SUFBbUIsRUFBRztFQUFBLEVBQzNGO0FBRUosQ0FBQztBQUNEZixNQUFNLENBQUNLLElBQUEsQ0FBQ0ssSUFBSSxLQUFHLENBQUMifQ==