#!/usr/bin/env NODE_NO_WARNINGS=1 node --loader=import-jsx
import React, { useState } from 'react';
import { render, Text } from 'ink';
import SelectInput from 'ink-select-input';
import TextInput from 'ink-text-input';
import Spinner from 'ink-spinner';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
const CHAT_BOTS = [{
  label: 'Leonardo Davinci',
  value: 'leonardo davinci'
}, {
  label: 'Physics professor',
  value: 'Physics professor'
}, {
  label: 'King of England',
  value: 'king of england'
}];
const ChatGPT = () => {
  const [chatbot, setChatbot] = useState('');
  const [question, setQuestion] = useState('');
  const [loading, setLoading] = useState(false);
  const setSelectedChatbot = option => {
    setChatbot(option.value);
  };

  // TODO: Call ChatGPT API from here
  const askQuestion = input => {
    setLoading(true);
  };
  const onQuestionChange = question => {
    setQuestion(question);
  };
  return _jsxs(_Fragment, {
    children: [!chatbot && _jsx(Text, {
      color: "green",
      children: "What type of chatbot would you like to create?"
    }), !chatbot && _jsx(SelectInput, {
      items: CHAT_BOTS,
      onSelect: setSelectedChatbot
    }), chatbot && _jsx(Text, {
      color: "green",
      children: "Perfect!, now tell me your question"
    }), !loading && chatbot && _jsx(TextInput, {
      value: question,
      onChange: onQuestionChange,
      onSubmit: askQuestion
    }), loading && _jsxs(Text, {
      color: "blue",
      children: [_jsx(Spinner, {
        type: "flip"
      }), "\xA0Wait a moment, asking to ChatGPT"]
    })]
  });
};
render(_jsx(ChatGPT, {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInVzZVN0YXRlIiwicmVuZGVyIiwiVGV4dCIsIlNlbGVjdElucHV0IiwiVGV4dElucHV0IiwiU3Bpbm5lciIsImpzeCIsIl9qc3giLCJqc3hzIiwiX2pzeHMiLCJGcmFnbWVudCIsIl9GcmFnbWVudCIsIkNIQVRfQk9UUyIsImxhYmVsIiwidmFsdWUiLCJDaGF0R1BUIiwiY2hhdGJvdCIsInNldENoYXRib3QiLCJxdWVzdGlvbiIsInNldFF1ZXN0aW9uIiwibG9hZGluZyIsInNldExvYWRpbmciLCJzZXRTZWxlY3RlZENoYXRib3QiLCJvcHRpb24iLCJhc2tRdWVzdGlvbiIsImlucHV0Iiwib25RdWVzdGlvbkNoYW5nZSIsImNoaWxkcmVuIiwiY29sb3IiLCJpdGVtcyIsIm9uU2VsZWN0Iiwib25DaGFuZ2UiLCJvblN1Ym1pdCIsInR5cGUiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBOT0RFX05PX1dBUk5JTkdTPTEgbm9kZSAtLWxvYWRlcj1pbXBvcnQtanN4XG5cbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgVGV4dCB9IGZyb20gJ2luayc7XG5pbXBvcnQgU2VsZWN0SW5wdXQgZnJvbSAnaW5rLXNlbGVjdC1pbnB1dCc7XG5pbXBvcnQgVGV4dElucHV0IGZyb20gJ2luay10ZXh0LWlucHV0JztcbmltcG9ydCBTcGlubmVyIGZyb20gJ2luay1zcGlubmVyJztcblxuXG5jb25zdCBDSEFUX0JPVFMgPSBbXG5cdHtcblx0XHRsYWJlbDogJ0xlb25hcmRvIERhdmluY2knLFxuXHRcdHZhbHVlOiAnbGVvbmFyZG8gZGF2aW5jaSdcblx0fSxcblx0e1xuXHRcdGxhYmVsOiAnUGh5c2ljcyBwcm9mZXNzb3InLFxuXHRcdHZhbHVlOiAnUGh5c2ljcyBwcm9mZXNzb3InXG5cdH0sXG5cdHtcblx0XHRsYWJlbDogJ0tpbmcgb2YgRW5nbGFuZCcsXG5cdFx0dmFsdWU6ICdraW5nIG9mIGVuZ2xhbmQnXG5cdH1cbl1cblxuY29uc3QgQ2hhdEdQVCA9ICgpID0+IHtcblx0Y29uc3QgW2NoYXRib3QsIHNldENoYXRib3RdID0gdXNlU3RhdGUoJycpXG5cdGNvbnN0IFtxdWVzdGlvbiwgc2V0UXVlc3Rpb25dID0gdXNlU3RhdGUoJycpXG5cdGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKGZhbHNlKVxuXG5cdGNvbnN0IHNldFNlbGVjdGVkQ2hhdGJvdCA9IChvcHRpb24pID0+IHtcblx0XHRzZXRDaGF0Ym90KG9wdGlvbi52YWx1ZSlcblx0fVxuXG5cdC8vIFRPRE86IENhbGwgQ2hhdEdQVCBBUEkgZnJvbSBoZXJlXG5cdGNvbnN0IGFza1F1ZXN0aW9uID0gKGlucHV0KSA9PiB7XG5cdFx0c2V0TG9hZGluZyh0cnVlKVxuXG5cdH1cblxuXHRjb25zdCBvblF1ZXN0aW9uQ2hhbmdlID0gKHF1ZXN0aW9uKSA9PiB7XG5cdFx0c2V0UXVlc3Rpb24ocXVlc3Rpb24pXG5cdH1cblxuXG5cdHJldHVybiA8PlxuXHRcdHshY2hhdGJvdCAmJiA8VGV4dCBjb2xvcj1cImdyZWVuXCI+V2hhdCB0eXBlIG9mIGNoYXRib3Qgd291bGQgeW91IGxpa2UgdG8gY3JlYXRlPzwvVGV4dD59XG5cdFx0eyFjaGF0Ym90ICYmIDxTZWxlY3RJbnB1dCBpdGVtcz17Q0hBVF9CT1RTfSBvblNlbGVjdD17c2V0U2VsZWN0ZWRDaGF0Ym90fSAvPn1cblx0XHR7Y2hhdGJvdCAmJiA8VGV4dCBjb2xvcj1cImdyZWVuXCI+UGVyZmVjdCEsIG5vdyB0ZWxsIG1lIHlvdXIgcXVlc3Rpb248L1RleHQ+fVxuXHRcdHshbG9hZGluZyAmJiBjaGF0Ym90ICYmIDxUZXh0SW5wdXQgdmFsdWU9e3F1ZXN0aW9ufSBvbkNoYW5nZT17b25RdWVzdGlvbkNoYW5nZX0gb25TdWJtaXQ9e2Fza1F1ZXN0aW9ufSAvPn1cblx0XHR7bG9hZGluZyAmJiA8VGV4dCBjb2xvcj1cImJsdWVcIj48U3Bpbm5lciB0eXBlPSdmbGlwJyAvPiZuYnNwO1dhaXQgYSBtb21lbnQsIGFza2luZyB0byBDaGF0R1BUPC9UZXh0Pn1cblx0PC8+XG5cbn07XG5yZW5kZXIoPENoYXRHUFQgLz4pOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxPQUFPQSxLQUFLLElBQUlDLFFBQVEsUUFBUSxPQUFPO0FBQ3ZDLFNBQVNDLE1BQU0sRUFBRUMsSUFBSSxRQUFRLEtBQUs7QUFDbEMsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQUMxQyxPQUFPQyxTQUFTLE1BQU0sZ0JBQWdCO0FBQ3RDLE9BQU9DLE9BQU8sTUFBTSxhQUFhO0FBQUMsU0FBQUMsR0FBQSxJQUFBQyxJQUFBO0FBQUEsU0FBQUMsSUFBQSxJQUFBQyxLQUFBO0FBQUEsU0FBQUMsUUFBQSxJQUFBQyxTQUFBO0FBR2xDLE1BQU1DLFNBQVMsR0FBRyxDQUNqQjtFQUNDQyxLQUFLLEVBQUUsa0JBQWtCO0VBQ3pCQyxLQUFLLEVBQUU7QUFDUixDQUFDLEVBQ0Q7RUFDQ0QsS0FBSyxFQUFFLG1CQUFtQjtFQUMxQkMsS0FBSyxFQUFFO0FBQ1IsQ0FBQyxFQUNEO0VBQ0NELEtBQUssRUFBRSxpQkFBaUI7RUFDeEJDLEtBQUssRUFBRTtBQUNSLENBQUMsQ0FDRDtBQUVELE1BQU1DLE9BQU8sR0FBR0EsQ0FBQSxLQUFNO0VBQ3JCLE1BQU0sQ0FBQ0MsT0FBTyxFQUFFQyxVQUFVLENBQUMsR0FBR2pCLFFBQVEsQ0FBQyxFQUFFLENBQUM7RUFDMUMsTUFBTSxDQUFDa0IsUUFBUSxFQUFFQyxXQUFXLENBQUMsR0FBR25CLFFBQVEsQ0FBQyxFQUFFLENBQUM7RUFDNUMsTUFBTSxDQUFDb0IsT0FBTyxFQUFFQyxVQUFVLENBQUMsR0FBR3JCLFFBQVEsQ0FBQyxLQUFLLENBQUM7RUFFN0MsTUFBTXNCLGtCQUFrQixHQUFJQyxNQUFNLElBQUs7SUFDdENOLFVBQVUsQ0FBQ00sTUFBTSxDQUFDVCxLQUFLLENBQUM7RUFDekIsQ0FBQzs7RUFFRDtFQUNBLE1BQU1VLFdBQVcsR0FBSUMsS0FBSyxJQUFLO0lBQzlCSixVQUFVLENBQUMsSUFBSSxDQUFDO0VBRWpCLENBQUM7RUFFRCxNQUFNSyxnQkFBZ0IsR0FBSVIsUUFBUSxJQUFLO0lBQ3RDQyxXQUFXLENBQUNELFFBQVEsQ0FBQztFQUN0QixDQUFDO0VBR0QsT0FBT1QsS0FBQSxDQUFBRSxTQUFBO0lBQUFnQixRQUFBLEdBQ0wsQ0FBQ1gsT0FBTyxJQUFJVCxJQUFBLENBQUNMLElBQUk7TUFBQzBCLEtBQUssRUFBQyxPQUFPO01BQUFELFFBQUEsRUFBQztJQUE4QyxFQUFPLEVBQ3JGLENBQUNYLE9BQU8sSUFBSVQsSUFBQSxDQUFDSixXQUFXO01BQUMwQixLQUFLLEVBQUVqQixTQUFVO01BQUNrQixRQUFRLEVBQUVSO0lBQW1CLEVBQUcsRUFDM0VOLE9BQU8sSUFBSVQsSUFBQSxDQUFDTCxJQUFJO01BQUMwQixLQUFLLEVBQUMsT0FBTztNQUFBRCxRQUFBLEVBQUM7SUFBbUMsRUFBTyxFQUN6RSxDQUFDUCxPQUFPLElBQUlKLE9BQU8sSUFBSVQsSUFBQSxDQUFDSCxTQUFTO01BQUNVLEtBQUssRUFBRUksUUFBUztNQUFDYSxRQUFRLEVBQUVMLGdCQUFpQjtNQUFDTSxRQUFRLEVBQUVSO0lBQVksRUFBRyxFQUN4R0osT0FBTyxJQUFJWCxLQUFBLENBQUNQLElBQUk7TUFBQzBCLEtBQUssRUFBQyxNQUFNO01BQUFELFFBQUEsR0FBQ3BCLElBQUEsQ0FBQ0YsT0FBTztRQUFDNEIsSUFBSSxFQUFDO01BQU0sRUFBRyx3Q0FBc0M7SUFBQSxFQUFPO0VBQUEsRUFDakc7QUFFSixDQUFDO0FBQ0RoQyxNQUFNLENBQUNNLElBQUEsQ0FBQ1EsT0FBTyxLQUFHLENBQUMifQ==