#!/usr/bin/env NODE_NO_WARNINGS=1 node --loader=import-jsx
import React, { useState, useEffect } from 'react';
import { render, Text } from 'ink';
import SelectInput from 'ink-select-input';
import TextInput from 'ink-text-input';
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const Demo = () => {
  const [chatbot, setChatbot] = useState('');
  const [question, setQuestion] = useState();
  const setSelectedChatbot = option => {
    console.log(option);
    setChatbot(option.value);
  };
  const handleSelect = item => {
    console.log('you selected', item);
  };
  const items = [{
    label: 'Leonardo Davinci',
    value: 'leonardo davinci'
  }, {
    label: 'Physics professor',
    value: 'Physics professor'
  }, {
    label: 'King of England',
    value: 'king of england'
  }];
  return _jsxs(_Fragment, {
    children: [_jsx(Text, {
      color: "green",
      children: "What type of chatbot would you like to create?"
    }), _jsx(SelectInput, {
      items: items,
      onSelect: handleSelect
    }), chatbot && _jsx(Text, {
      color: "green",
      children: "Tell me your question"
    }), chatbot && _jsx(TextInput, {
      value: chatbot,
      onChange: setChatbot,
      onSubmit: setSelectedChatbot
    })]
  });
};
render(_jsx(Demo, {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwicmVuZGVyIiwiVGV4dCIsIlNlbGVjdElucHV0IiwiVGV4dElucHV0IiwianN4IiwiX2pzeCIsIkZyYWdtZW50IiwiX0ZyYWdtZW50IiwianN4cyIsIl9qc3hzIiwiRGVtbyIsImNoYXRib3QiLCJzZXRDaGF0Ym90IiwicXVlc3Rpb24iLCJzZXRRdWVzdGlvbiIsInNldFNlbGVjdGVkQ2hhdGJvdCIsIm9wdGlvbiIsImNvbnNvbGUiLCJsb2ciLCJ2YWx1ZSIsImhhbmRsZVNlbGVjdCIsIml0ZW0iLCJpdGVtcyIsImxhYmVsIiwiY2hpbGRyZW4iLCJjb2xvciIsIm9uU2VsZWN0Iiwib25DaGFuZ2UiLCJvblN1Ym1pdCJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IE5PREVfTk9fV0FSTklOR1M9MSBub2RlIC0tbG9hZGVyPWltcG9ydC1qc3hcblxuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIFRleHQgfSBmcm9tICdpbmsnO1xuaW1wb3J0IFNlbGVjdElucHV0IGZyb20gJ2luay1zZWxlY3QtaW5wdXQnO1xuaW1wb3J0IFRleHRJbnB1dCBmcm9tICdpbmstdGV4dC1pbnB1dCc7XG5cblxuY29uc3QgRGVtbyA9ICgpID0+IHtcblx0Y29uc3QgW2NoYXRib3QsIHNldENoYXRib3RdID0gdXNlU3RhdGUoJycpXG5cdGNvbnN0IFtxdWVzdGlvbiwgc2V0UXVlc3Rpb25dID0gdXNlU3RhdGUoKVxuXG5cdGNvbnN0IHNldFNlbGVjdGVkQ2hhdGJvdCA9IChvcHRpb24pID0+IHtcblx0XHRjb25zb2xlLmxvZyhvcHRpb24pXG5cdFx0c2V0Q2hhdGJvdChvcHRpb24udmFsdWUpXG5cdH1cblxuXHRjb25zdCBoYW5kbGVTZWxlY3QgPSBpdGVtID0+IHtcblx0XHRjb25zb2xlLmxvZygneW91IHNlbGVjdGVkJywgaXRlbSlcblx0fTtcblxuXHRjb25zdCBpdGVtcyA9IFtcblx0XHR7XG5cdFx0XHRsYWJlbDogJ0xlb25hcmRvIERhdmluY2knLFxuXHRcdFx0dmFsdWU6ICdsZW9uYXJkbyBkYXZpbmNpJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdFx0bGFiZWw6ICdQaHlzaWNzIHByb2Zlc3NvcicsXG5cdFx0XHR2YWx1ZTogJ1BoeXNpY3MgcHJvZmVzc29yJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdFx0bGFiZWw6ICdLaW5nIG9mIEVuZ2xhbmQnLFxuXHRcdFx0dmFsdWU6ICdraW5nIG9mIGVuZ2xhbmQnXG5cdFx0fVxuXHRdO1xuXG5cdHJldHVybiA8PlxuXHRcdDxUZXh0IGNvbG9yPVwiZ3JlZW5cIj5XaGF0IHR5cGUgb2YgY2hhdGJvdCB3b3VsZCB5b3UgbGlrZSB0byBjcmVhdGU/PC9UZXh0PlxuXHRcdDxTZWxlY3RJbnB1dCBpdGVtcz17aXRlbXN9IG9uU2VsZWN0PXtoYW5kbGVTZWxlY3R9IC8+XG5cdFx0e2NoYXRib3QgJiYgPFRleHQgY29sb3I9XCJncmVlblwiPlRlbGwgbWUgeW91ciBxdWVzdGlvbjwvVGV4dD4gfVxuXHRcdHtjaGF0Ym90ICYmIDxUZXh0SW5wdXQgdmFsdWU9e2NoYXRib3R9IG9uQ2hhbmdlPXtzZXRDaGF0Ym90fSBvblN1Ym1pdD17c2V0U2VsZWN0ZWRDaGF0Ym90fSAvPn1cblx0PC8+XG5cbn07XG5yZW5kZXIoPERlbW8gLz4pOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxPQUFPQSxLQUFLLElBQUlDLFFBQVEsRUFBRUMsU0FBUyxRQUFRLE9BQU87QUFDbEQsU0FBU0MsTUFBTSxFQUFFQyxJQUFJLFFBQVEsS0FBSztBQUNsQyxPQUFPQyxXQUFXLE1BQU0sa0JBQWtCO0FBQzFDLE9BQU9DLFNBQVMsTUFBTSxnQkFBZ0I7QUFBQyxTQUFBQyxHQUFBLElBQUFDLElBQUE7QUFBQSxTQUFBQyxRQUFBLElBQUFDLFNBQUE7QUFBQSxTQUFBQyxJQUFBLElBQUFDLEtBQUE7QUFHdkMsTUFBTUMsSUFBSSxHQUFHQSxDQUFBLEtBQU07RUFDbEIsTUFBTSxDQUFDQyxPQUFPLEVBQUVDLFVBQVUsQ0FBQyxHQUFHZCxRQUFRLENBQUMsRUFBRSxDQUFDO0VBQzFDLE1BQU0sQ0FBQ2UsUUFBUSxFQUFFQyxXQUFXLENBQUMsR0FBR2hCLFFBQVEsRUFBRTtFQUUxQyxNQUFNaUIsa0JBQWtCLEdBQUlDLE1BQU0sSUFBSztJQUN0Q0MsT0FBTyxDQUFDQyxHQUFHLENBQUNGLE1BQU0sQ0FBQztJQUNuQkosVUFBVSxDQUFDSSxNQUFNLENBQUNHLEtBQUssQ0FBQztFQUN6QixDQUFDO0VBRUQsTUFBTUMsWUFBWSxHQUFHQyxJQUFJLElBQUk7SUFDNUJKLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGNBQWMsRUFBRUcsSUFBSSxDQUFDO0VBQ2xDLENBQUM7RUFFRCxNQUFNQyxLQUFLLEdBQUcsQ0FDYjtJQUNDQyxLQUFLLEVBQUUsa0JBQWtCO0lBQ3pCSixLQUFLLEVBQUU7RUFDUixDQUFDLEVBQ0Q7SUFDQ0ksS0FBSyxFQUFFLG1CQUFtQjtJQUMxQkosS0FBSyxFQUFFO0VBQ1IsQ0FBQyxFQUNEO0lBQ0NJLEtBQUssRUFBRSxpQkFBaUI7SUFDeEJKLEtBQUssRUFBRTtFQUNSLENBQUMsQ0FDRDtFQUVELE9BQU9WLEtBQUEsQ0FBQUYsU0FBQTtJQUFBaUIsUUFBQSxHQUNObkIsSUFBQSxDQUFDSixJQUFJO01BQUN3QixLQUFLLEVBQUMsT0FBTztNQUFBRCxRQUFBLEVBQUM7SUFBOEMsRUFBTyxFQUN6RW5CLElBQUEsQ0FBQ0gsV0FBVztNQUFDb0IsS0FBSyxFQUFFQSxLQUFNO01BQUNJLFFBQVEsRUFBRU47SUFBYSxFQUFHLEVBQ3BEVCxPQUFPLElBQUlOLElBQUEsQ0FBQ0osSUFBSTtNQUFDd0IsS0FBSyxFQUFDLE9BQU87TUFBQUQsUUFBQSxFQUFDO0lBQXFCLEVBQU8sRUFDM0RiLE9BQU8sSUFBSU4sSUFBQSxDQUFDRixTQUFTO01BQUNnQixLQUFLLEVBQUVSLE9BQVE7TUFBQ2dCLFFBQVEsRUFBRWYsVUFBVztNQUFDZ0IsUUFBUSxFQUFFYjtJQUFtQixFQUFHO0VBQUEsRUFDM0Y7QUFFSixDQUFDO0FBQ0RmLE1BQU0sQ0FBQ0ssSUFBQSxDQUFDSyxJQUFJLEtBQUcsQ0FBQyJ9