#!/usr/bin/env NODE_NO_WARNINGS=1 node --loader=import-jsx
import React, { useState, useEffect } from 'react';
import { render, Text } from 'ink';
import SelectInput from 'ink-select-input';
import TextInput from 'ink-text-input';
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const Demo = () => {
  const [chatbot, setChatbot] = useState('');
  const [question, setQuestion] = useState();
  const setSelectedChatbot = option => {
    setChatbot(option.value);
  };
  const askQuestion = input => {
    console.log(input);
  };
  const items = [{
    label: 'Leonardo Davinci',
    value: 'leonardo davinci'
  }, {
    label: 'Physics professor',
    value: 'Physics professor'
  }, {
    label: 'King of England',
    value: 'king of england'
  }];
  return _jsxs(_Fragment, {
    children: [!chatbot && _jsx(Text, {
      color: "green",
      children: "What type of chatbot would you like to create?"
    }), !chatbot && _jsx(SelectInput, {
      items: items,
      onSelect: setSelectedChatbot
    }), chatbot && _jsx(Text, {
      color: "green",
      children: "Perfect!, now tell me your question"
    }), chatbot && _jsx(TextInput, {
      value: question,
      onSubmit: askQuestion
    })]
  });
};
render(_jsx(Demo, {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwicmVuZGVyIiwiVGV4dCIsIlNlbGVjdElucHV0IiwiVGV4dElucHV0IiwianN4IiwiX2pzeCIsIkZyYWdtZW50IiwiX0ZyYWdtZW50IiwianN4cyIsIl9qc3hzIiwiRGVtbyIsImNoYXRib3QiLCJzZXRDaGF0Ym90IiwicXVlc3Rpb24iLCJzZXRRdWVzdGlvbiIsInNldFNlbGVjdGVkQ2hhdGJvdCIsIm9wdGlvbiIsInZhbHVlIiwiYXNrUXVlc3Rpb24iLCJpbnB1dCIsImNvbnNvbGUiLCJsb2ciLCJpdGVtcyIsImxhYmVsIiwiY2hpbGRyZW4iLCJjb2xvciIsIm9uU2VsZWN0Iiwib25TdWJtaXQiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBOT0RFX05PX1dBUk5JTkdTPTEgbm9kZSAtLWxvYWRlcj1pbXBvcnQtanN4XG5cbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBUZXh0IH0gZnJvbSAnaW5rJztcbmltcG9ydCBTZWxlY3RJbnB1dCBmcm9tICdpbmstc2VsZWN0LWlucHV0JztcbmltcG9ydCBUZXh0SW5wdXQgZnJvbSAnaW5rLXRleHQtaW5wdXQnO1xuXG5cbmNvbnN0IERlbW8gPSAoKSA9PiB7XG5cdGNvbnN0IFtjaGF0Ym90LCBzZXRDaGF0Ym90XSA9IHVzZVN0YXRlKCcnKVxuXHRjb25zdCBbcXVlc3Rpb24sIHNldFF1ZXN0aW9uXSA9IHVzZVN0YXRlKClcblxuXHRjb25zdCBzZXRTZWxlY3RlZENoYXRib3QgPSAob3B0aW9uKSA9PiB7XG5cdFx0c2V0Q2hhdGJvdChvcHRpb24udmFsdWUpXG5cdH1cblxuXHRjb25zdCBhc2tRdWVzdGlvbiA9IChpbnB1dCkgPT4ge1xuXHRcdGNvbnNvbGUubG9nKGlucHV0KVxuXHR9XG5cblxuXHRjb25zdCBpdGVtcyA9IFtcblx0XHR7XG5cdFx0XHRsYWJlbDogJ0xlb25hcmRvIERhdmluY2knLFxuXHRcdFx0dmFsdWU6ICdsZW9uYXJkbyBkYXZpbmNpJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdFx0bGFiZWw6ICdQaHlzaWNzIHByb2Zlc3NvcicsXG5cdFx0XHR2YWx1ZTogJ1BoeXNpY3MgcHJvZmVzc29yJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdFx0bGFiZWw6ICdLaW5nIG9mIEVuZ2xhbmQnLFxuXHRcdFx0dmFsdWU6ICdraW5nIG9mIGVuZ2xhbmQnXG5cdFx0fVxuXHRdO1xuXG5cdHJldHVybiA8PlxuXHRcdHshY2hhdGJvdCAmJiA8VGV4dCBjb2xvcj1cImdyZWVuXCI+V2hhdCB0eXBlIG9mIGNoYXRib3Qgd291bGQgeW91IGxpa2UgdG8gY3JlYXRlPzwvVGV4dD4gfVxuXHRcdHshY2hhdGJvdCAmJiA8U2VsZWN0SW5wdXQgaXRlbXM9e2l0ZW1zfSBvblNlbGVjdD17c2V0U2VsZWN0ZWRDaGF0Ym90fSAvPiB9XG5cdFx0e2NoYXRib3QgJiYgPFRleHQgY29sb3I9XCJncmVlblwiPlBlcmZlY3QhLCBub3cgdGVsbCBtZSB5b3VyIHF1ZXN0aW9uPC9UZXh0PiB9XG5cdFx0e2NoYXRib3QgJiYgPFRleHRJbnB1dCB2YWx1ZT17cXVlc3Rpb259IG9uU3VibWl0PXthc2tRdWVzdGlvbn0gLz59XG5cdDwvPlxuXG59O1xucmVuZGVyKDxEZW1vIC8+KTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBRUEsT0FBT0EsS0FBSyxJQUFJQyxRQUFRLEVBQUVDLFNBQVMsUUFBUSxPQUFPO0FBQ2xELFNBQVNDLE1BQU0sRUFBRUMsSUFBSSxRQUFRLEtBQUs7QUFDbEMsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQUMxQyxPQUFPQyxTQUFTLE1BQU0sZ0JBQWdCO0FBQUMsU0FBQUMsR0FBQSxJQUFBQyxJQUFBO0FBQUEsU0FBQUMsUUFBQSxJQUFBQyxTQUFBO0FBQUEsU0FBQUMsSUFBQSxJQUFBQyxLQUFBO0FBR3ZDLE1BQU1DLElBQUksR0FBR0EsQ0FBQSxLQUFNO0VBQ2xCLE1BQU0sQ0FBQ0MsT0FBTyxFQUFFQyxVQUFVLENBQUMsR0FBR2QsUUFBUSxDQUFDLEVBQUUsQ0FBQztFQUMxQyxNQUFNLENBQUNlLFFBQVEsRUFBRUMsV0FBVyxDQUFDLEdBQUdoQixRQUFRLEVBQUU7RUFFMUMsTUFBTWlCLGtCQUFrQixHQUFJQyxNQUFNLElBQUs7SUFDdENKLFVBQVUsQ0FBQ0ksTUFBTSxDQUFDQyxLQUFLLENBQUM7RUFDekIsQ0FBQztFQUVELE1BQU1DLFdBQVcsR0FBSUMsS0FBSyxJQUFLO0lBQzlCQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0YsS0FBSyxDQUFDO0VBQ25CLENBQUM7RUFHRCxNQUFNRyxLQUFLLEdBQUcsQ0FDYjtJQUNDQyxLQUFLLEVBQUUsa0JBQWtCO0lBQ3pCTixLQUFLLEVBQUU7RUFDUixDQUFDLEVBQ0Q7SUFDQ00sS0FBSyxFQUFFLG1CQUFtQjtJQUMxQk4sS0FBSyxFQUFFO0VBQ1IsQ0FBQyxFQUNEO0lBQ0NNLEtBQUssRUFBRSxpQkFBaUI7SUFDeEJOLEtBQUssRUFBRTtFQUNSLENBQUMsQ0FDRDtFQUVELE9BQU9SLEtBQUEsQ0FBQUYsU0FBQTtJQUFBaUIsUUFBQSxHQUNMLENBQUNiLE9BQU8sSUFBSU4sSUFBQSxDQUFDSixJQUFJO01BQUN3QixLQUFLLEVBQUMsT0FBTztNQUFBRCxRQUFBLEVBQUM7SUFBOEMsRUFBTyxFQUNyRixDQUFDYixPQUFPLElBQUlOLElBQUEsQ0FBQ0gsV0FBVztNQUFDb0IsS0FBSyxFQUFFQSxLQUFNO01BQUNJLFFBQVEsRUFBRVg7SUFBbUIsRUFBRyxFQUN2RUosT0FBTyxJQUFJTixJQUFBLENBQUNKLElBQUk7TUFBQ3dCLEtBQUssRUFBQyxPQUFPO01BQUFELFFBQUEsRUFBQztJQUFtQyxFQUFPLEVBQ3pFYixPQUFPLElBQUlOLElBQUEsQ0FBQ0YsU0FBUztNQUFDYyxLQUFLLEVBQUVKLFFBQVM7TUFBQ2MsUUFBUSxFQUFFVDtJQUFZLEVBQUc7RUFBQSxFQUMvRDtBQUVKLENBQUM7QUFDRGxCLE1BQU0sQ0FBQ0ssSUFBQSxDQUFDSyxJQUFJLEtBQUcsQ0FBQyJ9